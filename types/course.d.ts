import * as z from "zod";
import { statusValueSchema } from "./student";
export type SubscriptionStatus = z.infer<typeof statusValueSchema>;
export declare const lectureSchema: z.ZodObject<{
    _id: z.ZodOptional<z.ZodString>;
    doctorId: z.ZodString;
    courseId: z.ZodString;
    title: z.ZodString;
    description: z.ZodString;
    isFree: z.ZodBoolean;
    attachment: z.ZodOptional<z.ZodString>;
    cover: z.ZodString;
    url: z.ZodString;
    material: z.ZodString;
    subscriptionStatus: z.ZodUnion<[z.ZodLiteral<"pending">, z.ZodLiteral<"accepted">, z.ZodLiteral<"rejected">]>;
}, "strip", z.ZodTypeAny, {
    doctorId: string;
    courseId: string;
    title: string;
    description: string;
    isFree: boolean;
    cover: string;
    url: string;
    material: string;
    subscriptionStatus: "pending" | "accepted" | "rejected";
    _id?: string | undefined;
    attachment?: string | undefined;
}, {
    doctorId: string;
    courseId: string;
    title: string;
    description: string;
    isFree: boolean;
    cover: string;
    url: string;
    material: string;
    subscriptionStatus: "pending" | "accepted" | "rejected";
    _id?: string | undefined;
    attachment?: string | undefined;
}>;
export type Lecture = z.infer<typeof lectureSchema>;
export declare const courseSchema: z.ZodObject<{
    _id: z.ZodOptional<z.ZodString>;
    doctorId: z.ZodString;
    title: z.ZodString;
    description: z.ZodString;
    cover: z.ZodString;
    instructor: z.ZodString;
    university: z.ZodString;
    year: z.ZodString;
    startDate: z.ZodString;
    endDate: z.ZodString;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
    status: z.ZodUnion<[z.ZodLiteral<"pending">, z.ZodLiteral<"accepted">, z.ZodLiteral<"rejected">]>;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "accepted" | "rejected";
    doctorId: string;
    university: string;
    title: string;
    description: string;
    cover: string;
    instructor: string;
    year: string;
    startDate: string;
    endDate: string;
    _id?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
}, {
    status: "pending" | "accepted" | "rejected";
    doctorId: string;
    university: string;
    title: string;
    description: string;
    cover: string;
    instructor: string;
    year: string;
    startDate: string;
    endDate: string;
    _id?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
}>;
export declare const courseWithLecturesSchema: z.ZodObject<{
    status: z.ZodUnion<[z.ZodLiteral<"pending">, z.ZodLiteral<"accepted">, z.ZodLiteral<"rejected">]>;
    doctorId: z.ZodString;
    university: z.ZodString;
    _id: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
    title: z.ZodString;
    description: z.ZodString;
    cover: z.ZodString;
    instructor: z.ZodString;
    year: z.ZodString;
    startDate: z.ZodString;
    endDate: z.ZodString;
    lectures: z.ZodArray<z.ZodObject<{
        _id: z.ZodOptional<z.ZodString>;
        doctorId: z.ZodString;
        courseId: z.ZodString;
        title: z.ZodString;
        description: z.ZodString;
        isFree: z.ZodBoolean;
        attachment: z.ZodOptional<z.ZodString>;
        cover: z.ZodString;
        url: z.ZodString;
        material: z.ZodString;
        subscriptionStatus: z.ZodUnion<[z.ZodLiteral<"pending">, z.ZodLiteral<"accepted">, z.ZodLiteral<"rejected">]>;
    }, "strip", z.ZodTypeAny, {
        doctorId: string;
        courseId: string;
        title: string;
        description: string;
        isFree: boolean;
        cover: string;
        url: string;
        material: string;
        subscriptionStatus: "pending" | "accepted" | "rejected";
        _id?: string | undefined;
        attachment?: string | undefined;
    }, {
        doctorId: string;
        courseId: string;
        title: string;
        description: string;
        isFree: boolean;
        cover: string;
        url: string;
        material: string;
        subscriptionStatus: "pending" | "accepted" | "rejected";
        _id?: string | undefined;
        attachment?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    status: "pending" | "accepted" | "rejected";
    doctorId: string;
    university: string;
    title: string;
    description: string;
    cover: string;
    instructor: string;
    year: string;
    startDate: string;
    endDate: string;
    lectures: {
        doctorId: string;
        courseId: string;
        title: string;
        description: string;
        isFree: boolean;
        cover: string;
        url: string;
        material: string;
        subscriptionStatus: "pending" | "accepted" | "rejected";
        _id?: string | undefined;
        attachment?: string | undefined;
    }[];
    _id?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
}, {
    status: "pending" | "accepted" | "rejected";
    doctorId: string;
    university: string;
    title: string;
    description: string;
    cover: string;
    instructor: string;
    year: string;
    startDate: string;
    endDate: string;
    lectures: {
        doctorId: string;
        courseId: string;
        title: string;
        description: string;
        isFree: boolean;
        cover: string;
        url: string;
        material: string;
        subscriptionStatus: "pending" | "accepted" | "rejected";
        _id?: string | undefined;
        attachment?: string | undefined;
    }[];
    _id?: string | undefined;
    createdAt?: string | undefined;
    updatedAt?: string | undefined;
}>;
export type Course = z.infer<typeof courseSchema>;
export type CourseWithLectures = z.infer<typeof courseWithLecturesSchema>;
//# sourceMappingURL=course.d.ts.map